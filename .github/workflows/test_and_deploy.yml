name: Django Project Test and Reformat

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
  Reformat_AND_Test:
    runs-on: ubuntu-latest
    name: Reformat And Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare environment file
        run: |
          mkdir -p env/prod
          cp env/prod/.env.sample env/prod/.env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> env/prod/.env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> env/prod/.env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> env/prod/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> env/prod/.env
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> env/prod/.env
          echo "SQL_HOST=${{ secrets.SQL_HOST }}" >> env/prod/.env
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> env/prod/.env
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> env/prod/.env

      - name: Setup docker compose
        run: docker compose -f docker-compose-prod.yml up -d

      - name: Reformat and flake8 check
        run: docker compose -f docker-compose-prod.yml exec backend sh -c "black --line-length 120 . && flake8 ."

      - name: Run tests
        run: docker compose -f docker-compose-prod.yml exec backend sh -c "pytest ."

  Deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: Reformat_AND_Test
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    steps:
      - name: Connect to server
        uses: appleboy/ssh-action
        with: 
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PASSWORD }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          password: ${{ secrets.DEPLOY_PASSWORD }}
          script: |
            cd ${{ secrets.DEPLOY_PROJECT_PATH }} 
            sudo docker compose -f docker-compose-prod.yml down
            git pull
            sudo docker compose -f docker-compose-prod.yml up -d --build
